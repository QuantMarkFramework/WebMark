import numpy as np
import json

# A temporary way to get FCI values

# Don't flake this file since it mostly complains about the dictionaries being too long.
# flake8: noqa

sto_3g = {0.10: 2.7099607683997657, 0.20: 0.15748213365503227, 0.30: -0.6018037114169326, 0.40: -0.9141497050119503, 
          0.50: -1.0551597946880178, 0.60: -1.1162860069722242, 0.70: -1.1361894540879065, 0.80: -1.1341476666428472, 
          0.90: -1.1205602812268745, 1.00: -1.1011503301329566, 1.10: -1.0791929448522461, 1.20: -1.0567407461794296, 
          1.30: -1.0351862663067577, 1.40: -1.0154682491653269, 1.50: -0.9981493533579189, 1.60: -0.9834727289323322, 
          1.70: -0.971426688371732, 1.80: -0.9618169527204079, 1.90: -0.9543388539401209, 2.00: -0.9487399173169402, 
          2.10: -0.9443746810834238, 2.20: -0.9412240336653497, 2.30: -0.9389223859660627, 2.40: -0.9372549529936448, 
          2.50: -0.9360549199436619, 2.60: -0.9351960308386078, 2.70: -0.9345844159302307, 2.80: -0.9341510956661452, 
          2.90: -0.933845750775667, 3.00: -0.9336318445559841}


# 6-31g
six_31g = {0.10: 2.57108876461466, 0.20: 0.06516888714680125, 0.30: -0.6605101839425196, 0.40: -0.9506786529120017, 
           0.50: -1.0778638946460948, 0.60: -1.1319534596934364, 0.70: -1.1501568316028477, 0.80: -1.1500278807899216, 
           0.90: -1.1406024512258783, 1.00: -1.126778351363535, 1.10: -1.1112698785800634, 1.20: -1.0955954875230198, 
           1.30: -1.0806069023567768, 1.40: -1.066775271664398, 1.50: -1.0543474438914897, 1.60: -1.0434318171795838, 
           1.70: -1.0340447384135063, 1.80: -1.0261357160112394, 1.90: -1.0196035214502537, 2.00: -1.0143102746464019, 
           2.10: -1.0100960837563022, 2.20: -1.006793650132554, 2.30: -1.0042408981217505, 2.40: -1.0022901230546921, 
           2.50: -1.0008131475778583, 2.60: -0.9997029950962815, 2.70: -0.9988730874747856, 2.80: -0.9982550239228263, 
           2.90: -0.9977957727019429, 3.00: -0.9974548288640583}


def2_QZVPPD = {0.10: 2.483228142870508, 0.15: 0.8009268633432827, 0.20: 0.007020457663195145, 0.25: -0.43359910800124535, 0.30: -0.7002428631979958, 
               0.35: -0.8698844483405428, 0.40: -0.9809447180872586, 0.45: -1.0546279013164186, 0.50: -1.1034955671575832, 0.55: -1.135393488458415, 
               0.60: -1.1554296976733438, 0.65: -1.1670444278455427, 0.70: -1.1726207581214518, 0.75: -1.1738409344533367, 0.80: -1.1719086561942222, 
               0.85: -1.1677033283007554, 0.90: -1.1618783799179457, 0.95: -1.1549241496918552, 1.00: -1.147211688077271, 1.05: -1.1390240113720485, 
               1.10: -1.1305784577760951, 1.15: -1.1220428204992343, 1.20: -1.113547060645523, 1.25: -1.1051919328126982, 1.3: -1.097055390066802, 
               1.35: -1.0891973801457009, 1.40: -1.0816634589274243, 1.45: -1.0744875250572152, 1.50: -1.0676938976979753, 1.55: -1.0612989014127243, 
               1.60: -1.0553120826069264, 1.65: -1.049737153704097, 1.70: -1.0445727429809089, 1.75: -1.03981301544173, 1.80: -1.0354482195410517, 
               1.85: -1.0314652028163276, 1.90: -1.0278479254606028, 1.95: -1.0245779856832322, 2.00: -1.021635156788566, 2.05: -1.018997925460965, 
               2.10: -1.0166440148270257, 2.15: -1.0145508742665883, 2.20: -1.0126961196961668, 2.25: -1.011057911952135, 2.30: -1.0096152658420325, 
               2.35: -1.008348287501517, 2.40: -1.0072383422222606, 2.45: -1.0062681584882984, 2.50: -1.0054218764016642, 2.55: -1.0046850500163707, 
               2.60: -1.0040446134748855, 2.65: -1.0034888205319383, 2.70: -1.0030071659617485, 2.75: -1.0025902962653992, 2.80: -1.0022299161322719, 
               2.85: -1.0019186914311828, 2.90: -1.001650163502604, 2.95: -1.0014186634286928, 3.00: -1.0012192081020863}


def get_fci(basis_set):
    if basis_set == "sto-3g":
        items = sto_3g.items()
    elif basis_set == "6-31g":
        items = six_31g.items()
    elif basis_set == "def2-QZVPPD":
        items = def2_QZVPPD.items()
    else:
        raise ValueError("Basis set was not one of the supported ones (6-31g, sto-3g or def2_QZVPPD)")

    return [tuple(item) for item in items]


def get_fci_value_by_dist(basis_set, distance):
    """Get FCI values for H2

    basis_set: sto-3g, 6-31g or def2_QZVPPD
    distance: float between [0.1, 3.0]
    """

    # Round to two digits because the actual distances might vary a little because of the psi4 issue.
    distance = round(distance, 2)

    try:
        if basis_set == "sto-3g":
            if distance in sto_3g.keys():
                return six_31g[distance]
            else:
                return __interpolate(sto_3g, distance)
        elif basis_set == "6-31g":
            if distance in six_31g.keys():
                return six_31g[distance]
            else:
                return __interpolate(six_31g, distance)
        elif basis_set == "def2-QZVPPD":
            if distance in def2_QZVPPD.keys():
                return def2_QZVPPD[distance]
            else:
                return __interpolate(def2_QZVPPD, distance)
        else:
            raise ValueError("Basis set was not one of the supported ones (6-31g, sto-3g or def2_QZVPPD)")
    except Exception as e:
        __interpolate(basis_set, distance)
        return str(e)


def __interpolate(basis_set, distance):

    xp = list(basis_set.keys())
    fp = list(basis_set.values())

    return np.interp(distance,xp,fp)